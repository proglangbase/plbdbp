#!/usr/bin/env escript
%%
%% PLB db service node controller.
%%
%%   1) Change working directory to `code/erlang`.
%%   2) Rebuild any out of date `.beam` files for the service and dependencies.
%%   3) Process the command.
%%
-mode(compile).
-include("../dep/plbcom/code/erlang/filename.hrl").
-include("../dep/plbcom/code/erlang/plbnames.hrl").

-define(COOKIE, 'pdbJ2NTtZf').
-define(NAME_NODE, list_to_atom(?PLB_NAME_PREFIX_DB++"@"++?PLB_NAME_HOST)).

main([Cmd]) ->
  CodePath = filename:absname(?DIRNAME_MODULE++"/../code/erlang"),
  ComPath  = filename:absname(?DIRNAME_MODULE++"/../dep/plbcom/code/erlang"),
  Modules  = [ComPath++"/*", CodePath++"/*"],
  file:set_cwd(CodePath),
  make:all([{emake, Modules}]),
  c:l(plb_com),
  try
    plb_ctl:init(),
    case list_to_atom(string:lowercase(Cmd)) of
      start      -> start(plbdb);
      start_perl -> start(plbdb_perl);
      stop       -> stop();
      restart    -> restart(plbdb);
      status     -> status();
      _          -> main([])
    end,
    halt(0)
  catch
    {error,  Info} -> plb_ctl:report(io_lib:format("error: ~p", [Info])),     halt(1);
    {Source, Msg}  -> plb_ctl:report(io_lib:format("~p: ~s", [Source, Msg])), halt(1)
  end;

main(_) ->
  io:format("usage: ~s {start|start_perl|stop|restart|status}~n",
            [filename:basename(escript:script_name())]).

start(Module) ->
  case plb_ctl:start_node(?NAME_NODE, ?COOKIE) of
    already_running ->
      plb_ctl:report(?PLB_NAME_PREFIX_DB++" already running");
    ok ->
      plb_ctl:rpc(?NAME_NODE, Module, acquire, []),
      status()
  end.

stop() ->
  plb_ctl:stop_node(?NAME_NODE, ?COOKIE),
  status().

restart(Module) ->
  case plb_ctl:is_node_running(?NAME_NODE) of
    true -> stop();
    _ -> ok
  end,
  start(Module).

status() ->
  case plb_ctl:is_node_running(?NAME_NODE) of
    true  -> plb_ctl:report(?PLB_NAME_PREFIX_DB++" is running");
    false -> plb_ctl:report(?PLB_NAME_PREFIX_DB++" not running")
  end.
